<?xml version="1.0"?>
<document>

  <properties>
    <title>OCSP User Guide</title>
  </properties>

<body>

<section name="Verification tool">
<p>
Verification of a running responder can be done by using EJBCA's clientToolBox.
See <a href="userguide.html#EJBCA%20client%20toolbox">EJBCA clientToolBox</a> for instructions how to build and use it.
</p><p>
To get all available OCSP commands please type:
<source>
$TOOLBOX_HOME/ejbcaClientToolBox.sh OCSP
</source>
</p>
</section>

<section name="Multiple responder and CA certificates">
<p>
The OCSP responder can have many responder certificates, each issued by one CA and mapped by an OcspKeyBinding.
This means that the responder can answer requests targeted at multiple CAs. 
There is no built in limitation on the number of CAs that can be handled.
</p>
<subsection name="Selection of OCSP signing certificate from a request">
<p>
In the OCSP request as defined in RFC 6960, the hash of both issuing CA's Subject DN and public key is available:
</p>
<source>
   CertID          ::=     SEQUENCE {
       hashAlgorithm       AlgorithmIdentifier,
       issuerNameHash      OCTET STRING, -- Hash of issuer's DN
       issuerKeyHash       OCTET STRING, -- Hash of issuer's public key
       serialNumber        CertificateSerialNumber }
</source>
<p>
EJBCA will select OcspKeyBinding based on the subject DN and public key of the CA certificate that issued an OCSP signing certificate.
The issuing CA certificate is determined from the OCSP certificate chain and the construction of thi chain is described below.
</p>
</subsection>
<subsection name="CA key renewal considerations">
<p>
EJBCA considered two X.509 CA certificates as the same CA if they share the same Subject DN and as different versions
of the same CA if the public key is different.
Since both subject and key pair is used in the request, you will need two OcspKeyBindings (one issued before key
renewal and one after) to be able to serve OCSP requests where clients use CA certificate for both the old and new key
pair in their requests.
</p>
<note>
EJBCA will currently only allow you to issue OCSP signing certificate from the latest version of the CA,
which means that before such CA key renewal you will need to issue OCSP signing certificates that will last for the
life-time of the CA certificate.
</note>
</subsection>
</section>

<section name="How the certificate chain is constructed">
<p>
EJBCA currently builds the chain for each OCSP signing certificate by looking for the latest CA certificate with an
Subject DN equal to the Issuer DN of the OCSP signing certificate.
Unless the found CA certificate is self signed, the procedure is repeated until the full chain is built.
</p>
<p>
If the built chain is unable to verify the OCSP signing certificate (due to CA certificate key renewal), a different
algorithm is used where EJBCA uses the internal CertificateData.cAFingerprint value to determine the exact certificate
that has issued an OCSP signing certificate.
Similar to the case where we build the chain using the Issuer DN of the OCSP signing certificate, the process is
repeated until a full chain leading up to a self signed CA is built.
</p>
</section>

<section name="OCSP Response Certificate Chain">
<p>
For efficiency reasons, it is possible to configure EJBCA to either omit including the signing certificate or its certificate chain in the OCSP response.
Setting the relevant configurations in the $EJBCA_HOME/conf/ocsp.properties file or in the Internal Key Binding in the GUI, will have the following effect:
</p>
<ul>
<li>If 'ocsp.includesignercert=true' and 'ocsp.includecertchain=true', the signing certificate and its chain, except for the signing certificate 
root CA certificate, will be included in the OCSP response. If the signing certificate IS the root CA certificate, then the root CA certificate 
will be included in the response any way.</li>
<li>If 'ocsp.includesignercert=true' and 'ocsp.includecertchain=false', only the signing certificate will be included in the OCSP response even 
if it was a root CA certificate.</li>
<li>If 'ocsp.includesignercert=false', neither the signing certificate nor the certificate chain will be included in the OCSP response regardless 
of the value of 'ocsp.includecertchain'</li>
</ul>
</section>

<section name="Revoked CA certificates">
<p>
When the first entry in the CA certificate chain matching an OCSP request is revoked with one of the reason codes
"keyCompromise", "cACompromise", "aACompromise" or "unspecified", the status of the requested certificate will be
returned as revoked with reason "cACompromise"
</p>
<p>
This means that you can instantly block the use of leaf certificates by revoking the issuer of these certificates using
for example the "cACompromise" reason code even if the CA certificate is still considered valid according to a CRL at
the client.
</p>
<note>
This would also apply if you revoked a cross-signed CA certificate for one of these reasons or import such CA revocation
status update to you VAs.
</note>
<p>
We still recommend that you revoke the individual certificates, to ensure that they appear in fall-back CRLs.
</p>
</section>

<section name="Expired certificates">
<p>
EJBCA keeps the status of expired certificates in the database, so the responder will answer queries also for expired
certificates unless you remove them from the database.
In the internal EJBCA database the status of expired certificates are set to ARCHIVED in the database (CertificateData
table) by the CRL creation job. 
This ARCHIVED status does not (from EJBCA 3.9.4) affect the response sent by the OCSP responder. 
The algorithm is:
</p>
<ul>
<li>If status is CERT_REVOKED the certificate is revoked and reason and date is picked up.</li>
<li>If status is CERT_ARCHIVED and reason is _NOT_ REMOVEFROMCRL or NOT_REVOKED the certificate is revoked and reason and date is picked up.</li>
<li>If status is CERT_ARCHIVED and reason is REMOVEFROMCRL or NOT_REVOKED the certificate is NOT revoked.</li>
<li>If status is neither CERT_REVOKED or CERT_ARCHIVED the certificate is NOT revoked.</li>
</ul>
<p>The archive cutoff extension is used as defined in <a href="http://www.ietf.org/rfc/rfc6960.txt">RFC 6960</a>.</p>
</section>

<section name="Using the OCSP API">
<p>
The best way to learn the API is by looking at the source code, since it is included.
The client API is used in the class org.ejbca.core.protocol.ocsp.OCSPUnidClient.
The <a href="userguide.html#EJBCA%20client%20toolbox">EJBCA client toolbox</a> can serve as a good sample for using the
API and it is in the class org.ejbca.ui.cli.Ocsp.
</p>
</section>
<section name="OCSP extensions">
<p>
The standard allows the usage of extensions in OCSP requests and responses. 
</p>
<subsection name="Nonce">
<p>
Nonce is the only standard extensions defined.
The purpose of the nonce is that a client can verify that a response really is in response to the specific requests,
and not a replayed response.
Is is recommended that if the OCSP requests contains the nonce extension, the OCSP response also contains the nonce.
<br/>
EJBCA included the nonce from the client requests in the server response if the requests contains a nonce.
</p>
</subsection>
<subsection name="Custom extensions">
<p>
You can implement custom OCSP extensions in EJBCA by implementing a simple Java class and including it in the
application servers class-path. 
The easiest way to do that is to put your java file in an ejbca-custom directory, so it will be included in the
ejbca.ear file.
See EJBCA User Guide and look in conf/custom.properties for more information about using an ejbca-custom directory.
To use your custom OCSP extension you have to define a few properties in conf/ocsp.properties:
<ul>
<li>ocsp.extensionoid - the OID defining your extension.</li>
<li>ocsp.extensionclass - the fully qualified class name implementing your extension, i.e. org.ejbca.core.protocol.ocsp.extension.unid.OCSPUnidExtension.</li>
</ul>
To specify that an extension always be used in the reply regardless of what's specified in the request, preface the
relevant ocsp.extensionoid-value with an asterisk (e.g. *2.16.578.1.16.3.2)
</p>
</subsection>
<subsection name="Fnr-Unid Mapping Extension">
  <note>
  If you don't know what a Unid-Fnr mapping is, you are probably not interested in this part.
  </note>
  <p>
The Unid functionality is described in a separate <a href="unid.html">document</a>. 
  </p>
</subsection>
<subsection name="CertHash OCSP Extension">
  <p>
  The CertHash functionality is described in a separate <a href="certhash.html">document</a>. 
  </p>
</subsection>
</section>

<section name="Using HTTP GET and RFC5019">
<p>
For HTTP get requests according to <a href="http://www.ietf.org/rfc/rfc5019.txt">RFC5019</a> we can set HTTP headers in
the response to allow caching proxies to cache responses. 
By default these properties are set not to allow caching, which is the default behavior.
To enable caching in HTTP proxies you can tune a few properties in conf/ocsp.properties or in the an OcspKeyBinding.
<ul>
<li>ocsp.untilNextUpdate - number of seconds a response will be valid. This sets the nextUpdate field in the OCSP response.</li>
<li>ocsp.maxAge - how long a response will be cached, in seconds. Should be less than untilNextUpdate. This adds
<a href="http://www.ietf.org/rfc/rfc5019.txt">RFC5019</a> cache headers.</li>
</ul> 
</p><p>
You can also specify different nextUpdate values depending on which certificate profiles the certificate was issued by.
This only works when you have published the certificate information using EJBCA 3.9.0 or later, where the
certificateProfileId column in the CertificateData table is populated.
You can find the certificateProfileId in the AdminGUI.
<ul>
<li>ocsp.&lt;certificateProfileId>.untilNextUpdate - number of seconds a response will be valid for certificates issued
with the specified certificate profile.</li>
<li>ocsp.&lt;certificateProfileId>.maxAge - how long a response will be cached for certificates issued with the specified
certificate profile. Should be less than untilNextUpdate.</li>
</ul> 
If no specific certificateProfileId is specified the default values from ocsp.maxAge and ocsp.untilNextUpdate are used.
Properties from an OcspKeyBinding will override the defaults, but never certificateProfileId specific settings.
</p>
<p>However, in case of certificate status unknown, EJBCA attempts to avoid the caching of an OSCP GET response by setting 
the HTTP header "Cache-Control" to "no-cache, must-revalidate" (non-configurable)</p>
</section>

  <section name="OCSP stress testing">
  <p>
    Using the <a href="userguide.html#EJBCA%20client%20toolbox">EJBCA client toolbox</a> you can easily stress test
    your CAs and OCSP responders.
  </p><p>
  To stress test you can first issue a large number of certificates from the CA using the web-service stress test, and
  after this stress test the OCSP responder with a random selection of all the certificates issued.
  </p>
  <source>
$TOOLBOX_HOME/ejbcaClientToolBox.sh EjbcaWsRaCli stress ...
$TOOLBOX_HOME/ejbcaClientToolBox.sh OCSP stress ...
  </source>
  </section>

  <section name="Monitoring OCSP databases">
  <p>
<a href="adminguide.html#Local%20Database%20CLI%20%28EJBCA%20Enterprise%20only%29">EJBCA Database CLI</a> contains a tool for monitoring
OCSP databases. This tool is stand-alone and based on Java SE JPA that can be configured in
  </p>
<source>dist/ejbca-db-cli/META-INF/persistence.xml.</source>
  <p>
Log4J is used for reporting an can be configured in
  </p>
<source>dist/ejbca-db-cli/log4j.xml.</source>
  <p>
Once built, run the command with
  </p>
<source>./run.sh ocspmon</source>
  <p>
The tool operates using Certificate Profile IDs that are the internal representations of different Certificate
Profiles in EJBCA. When you run the tool it will output all the existing IDs in each OCSP. These IDs is also
shown in the AdminGUI for each CertificateProfile.
  </p><p>
Inconsistencies that will be detected are:
<ol>
<li>Missing info about certificates in the OCSP database. (ERROR)</li>
<li>Additional info about certificates in the OCSP database. (ERROR)</li>
<li>Info about certificates in the OCSP database that has been tampered with. (ERROR)</li>
<li>If there are any extra certificates profiles in use on the OCSP besides those that we are trying to check. (WARN)</li>
</ol>
Every detected inconsistency will also be reported in a summarizing final ERROR-message. If there are two many errors,
this final message will be truncated. 
  </p><p>
Since going through every single CertificateData row in a database is heavy work, it's highly recommended to
use indexes such as
  </p>
<source>create index certificatedata_idx7 on CertificateData(certificateProfileId);</source>
  <p>
for your both the CA database and each OCSP responder.
  </p>
  </section>
  
  <section name="Populating the OCSP responder database using a custom implementation">
  <p>
  When running the OCSP responder answering queries from CAs in an EJBCA installation, populating the database is easy.
  Simply use the 'External OCSP Publisher'. 
  Documentation how to configure this is located in the 'OCSP Installation' guide. 
  </p><p>
  When using other CA software than EJBCA you can populate the database based on data from that system.
  The only thing needed is to insert data in the CertificateData table on the external OCSP responder.
  </p><p>
  The values used by the OCSP responder are:
  <ul>
  <li>issuerDN</li>
  <li>serialNumber</li>
  <li>status</li>
  <li>revocationDate</li>
  <li>revocationReason</li>
  <li>certificateProfileId</li>
  </ul>
  </p><p>
  Specification of the fields:
  <ul>
  <li>issuerDN must be of "EJBCA normalized" form, as returned by org.cesecore.util.CertTools.getIssuerDN(cert).</li>
  <li>serialNumber is BigInteger.toString().</li>
  <li>Status is from CertificateDataBean.CERT_REVOKED etc.</li>
  <li>certificateProfileId can be basically anything and is used if you configure things like 'ocsp.999.untilNextUpdate' in ocsp.properties.</li>
  </ul>
  </p><p>
  CA certificates and OCSP signer certificates must also be in the database.
  For these certificates the fingerprint, subjectDN and base64Cert fields must also be included.
  </p>
  </section>
  <section name="Populating the OCSP responder database using the CRL download service">
  <p>
  In EJBCA 6.2.0+ you can configure a Service that automatically downloads and populates the mentioned fields from a CRL.
  <ul>
  <li>Admin GUI -> Certification Authorities -> "Import CA certificate..." for the CA that you want to serve OCSP responses for.</li>
  <li>Admin GUI -> Certification Authorities -> "Edit CA" for the imported CA -> Configure an external CDP where the CA makes its
  CRLs available (must begin with "http://")</li>
  <li>Admin GUI -> Services -> Add a new Service "CRLDownloadService"</li>
  <li>Admin GUI -> Services -> Edit "CRLDownloadService" -><br/>
  Select Worker: CRL Downloader<br/>
  CAs to Check: select the imported CA (or select ANY to process all external X509 CAs with a configured external CDP)<br/>
  Ignore nextUpdate and always download the CRL: select this option to force a download of the CRL whenever the service is executed
  instead of only downloading the CRL when the last known CRL indicates that a new one will be available.<br/>
  Maximum allowed size to download (bytes): The Service will refuse to process CRLs that are larger then this limit.<br/>
  Period: How often the Service should check if a new CRL needs to be downloaded.<br/>
  Active: Check to activate the service.<br/>
  Save
  </li>
  </ul>
  The next time the service is executed, there will be log entries showing if the CRL download and processing was successful.
  After the first execution of the service you should be able to download the CRL from the VA's Public Web pages.
  </p>
  <p>
  Next step is to setup an OcspKeyBinding as described for the case where direct database publishing is used.
  The only difference is that there is no way for the VA to know if a certificate has ever been issued, so
  it makes sense to respond OCSP status "good" for unknown certificates.
  </p>
  <p>
  If the downloaded CRL from the external CDP contains the Freshest CRL extension, the service will try to download and process
  any such URL that uses "http" as protocol.
  </p>
  </section>

<section name="Signature token activation (Upgrades only)">
<p>
If you are upgrading from an earlier (EJBCA 5.0.x) version of EJBCA, the activation password is required for migrating
the OCSP signing key-stores.
When activating you are prompted for a password.
This password will then be used for all token password not configured.
</p><p>
Activate like this:
</p>
<source>
$TOOLBOX_HOME/ejbcaClientToolBox.sh OCSPActivate
</source>
<p>
After migrating the key-stores and certificates to Crypto Tokens and OcspKeyBindings, you must use the EJB CLI for
activating your Crypto Tokens.
</p>
</section>

</body>
</document>

