/*************************************************************************
 *                                                                       *
 *  EJBCA Community: The OpenSource Certificate Authority                *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public           *
 *  License as published by the Free Software Foundation; either         *
 *  version 2.1 of the License, or any later version.                    *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
package org.ejbca.ra;

import java.io.IOException;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.event.AjaxBehaviorEvent;
import javax.faces.event.ValueChangeEvent;

import org.apache.log4j.Logger;
import org.cesecore.authorization.AuthorizationDeniedException;
import org.ejbca.core.model.era.RaMasterApiProxyBeanLocal;
import org.ejbca.core.model.ra.raadmin.EndEntityProfile;

/**
 * Example of JSF Managed Bean for backing a page. 
 * 
 * @version $Id: EnrollMakeNewRequest.java 23135 2016-04-05 23:05:35Z jeklund $
 */
@ManagedBean
@SessionScoped
public class EnrollMakeNewRequestBean implements Serializable {

    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(EnrollMakeNewRequestBean.class);

    @EJB
    private RaMasterApiProxyBeanLocal raMasterApiProxyBean;

    @ManagedProperty(value = "#{raAuthenticationBean}")
    private RaAuthenticationBean raAuthenticationBean;

    public void setRaAuthenticationBean(final RaAuthenticationBean raAuthenticationBean) {
        this.raAuthenticationBean = raAuthenticationBean;
    }

    @ManagedProperty(value = "#{raLocaleBean}")
    private RaLocaleBean raLocaleBean;

    public void setRaLocaleBean(final RaLocaleBean raLocaleBean) {
        this.raLocaleBean = raLocaleBean;
    }

    //1. Authorized end entity profiles (certificate types)
    private Map<String, EndEntityProfile> authorizedEndEntityProfiles = new HashMap<String, EndEntityProfile>();
    private String selectedEndEntityProfile;
    private boolean endEntityProfileChanged;

    //2. Key-pair generation
    public enum KeyPairGeneration {
        ON_SERVER ("Generated on server"),
        BY_BROWSER_CLIENT ("Generated by browser client"),
        PROVIDED_BY_USER ("Provided by user");
        private String value;
        private KeyPairGeneration(String value){
            this.value = value;
        }
        public String getValue(){
            return value;
        }
    }
    private Map<String, KeyPairGeneration> availableKeyPairGenerations = new HashMap<String, KeyPairGeneration>();
    private String selectedKeyPairGeneration;
    private boolean keyPairGenerationChanged;

    @PostConstruct
    private void postContruct() {
        reset();
    }

    private void initAvailableKeyPairGeneration() {
        EndEntityProfile endEntityProfile = authorizedEndEntityProfiles.get(selectedEndEntityProfile);
        String availableKeyStores = endEntityProfile.getValue(EndEntityProfile.AVAILKEYSTORE, 0);
        //TOKEN_SOFT_BROWSERGEN = 1;
        //TOKEN_SOFT_P12 = 2;
        //TOKEN_SOFT_JKS = 3;
        //TOKEN_SOFT_PEM = 4;
        if(availableKeyStores.contains("2") || availableKeyStores.contains("3") || availableKeyStores.contains("4")){
            availableKeyPairGenerations.put(KeyPairGeneration.ON_SERVER.getValue(), KeyPairGeneration.ON_SERVER);
        }
        if(availableKeyStores.contains("1")){
            availableKeyPairGenerations.put(KeyPairGeneration.BY_BROWSER_CLIENT.getValue(), KeyPairGeneration.BY_BROWSER_CLIENT);
            availableKeyPairGenerations.put(KeyPairGeneration.PROVIDED_BY_USER.getValue(), KeyPairGeneration.PROVIDED_BY_USER);
        }
    }

    public void reset() {
        try {
            setAuthorizedEndEntityProfiles(raMasterApiProxyBean.getAuthorizedEndEntityProfiles(raAuthenticationBean.getAuthenticationToken()));
        } catch (AuthorizationDeniedException e) {
            raLocaleBean.addMessageError("page_initialization_fail", e.getMessage());
        }
        
        resetKeyPairGeneration();
    }
    
    private final void resetKeyPairGeneration(){
        setSelectedKeyPairGeneration(null);
        availableKeyPairGenerations.clear();
        keyPairGenerationChanged = false;
    }

    public void next() throws IOException {
        if(endEntityProfileChanged){
            selectEndEntityProfile();
            setEndEntityProfileChanged(false);
        }else if(keyPairGenerationChanged){
            selectKeyPairGeneration();
            setKeyPairGenerationChanged(false);
        }
    }
    
    //Actions
    private final void selectEndEntityProfile(){
        resetKeyPairGeneration();
        initAvailableKeyPairGeneration();
        raLocaleBean.addMessageInfo("somefunction_testok", "Dummy Result", selectedEndEntityProfile);
    }
    
    private final void selectKeyPairGeneration(){
        raLocaleBean.addMessageInfo("somefunction_testok", "selectedKeyPairGeneration", selectedKeyPairGeneration);
    }
    
    public void endEntityProfileChangedListener(ValueChangeEvent e){
        setEndEntityProfileChanged(true);
    }
    
    public void keyPairGenerationChangedListener(ValueChangeEvent e){
        setKeyPairGenerationChanged(true);
    }
    
    //Ajax listeners
    public final void endEntityProfileListener(final AjaxBehaviorEvent event) {
        selectEndEntityProfile();
    }
    
    public final void keyPairGenerationListener(final AjaxBehaviorEvent event) {
        selectKeyPairGeneration();
    }

    //Getter/setters
    /**
     * @return the authorizedEndEntityProfiles
     */
    public Map<String, EndEntityProfile> getAuthorizedEndEntityProfiles() {
        return authorizedEndEntityProfiles;
    }

    /**
     * @param authorizedEndEntityProfiles the authorizedEndEntityProfiles to set
     */
    private void setAuthorizedEndEntityProfiles(Map<String, EndEntityProfile> authorizedEndEntityProfiles) {
        this.authorizedEndEntityProfiles = authorizedEndEntityProfiles;
    }

    /**
     * @return the selectedEndEntityProfile
     */
    public String getSelectedEndEntityProfile() {
        return selectedEndEntityProfile;
    }

    /**
     * @param selectedEndEntityProfile the selectedEndEntityProfile to set
     */
    public void setSelectedEndEntityProfile(String selectedEndEntityProfile) {
        this.selectedEndEntityProfile = selectedEndEntityProfile;
    }

    /**
     * @return the selectedKeyPairGeneration
     */
    public String getSelectedKeyPairGeneration() {
        return selectedKeyPairGeneration;
    }

    /**
     * @param selectedKeyPairGeneration the selectedKeyPairGeneration to set
     */
    public void setSelectedKeyPairGeneration(String selectedKeyStoreGeneration) {
        this.selectedKeyPairGeneration = selectedKeyStoreGeneration;
    }

    /**
     * @return the endEntityProfileChanged
     */
    public boolean isEndEntityProfileChanged() {
        return endEntityProfileChanged;
    }

    /**
     * @param endEntityProfileChanged the endEntityProfileChanged to set
     */
    public void setEndEntityProfileChanged(boolean endEntityProfileChanged) {
        this.endEntityProfileChanged = endEntityProfileChanged;
    }
    
    public Map<String, KeyPairGeneration> getAvailableKeyPairGenerations() {
        return availableKeyPairGenerations;
    }

    public void setAvailableKeyPairGenerations(Map<String, KeyPairGeneration> availableKeyPairGenerations) {
        this.availableKeyPairGenerations = availableKeyPairGenerations;
    }

    /**
     * @return the keyPairGenerationChanged
     */
    public boolean isKeyPairGenerationChanged() {
        return keyPairGenerationChanged;
    }

    /**
     * @param keyPairGenerationChanged the keyPairGenerationChanged to set
     */
    public void setKeyPairGenerationChanged(boolean keyPairGenerationChanged) {
        this.keyPairGenerationChanged = keyPairGenerationChanged;
    }
}
